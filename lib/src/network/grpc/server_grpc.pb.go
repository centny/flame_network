// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Server_RemotePing_FullMethodName = "/grpc.Server/remotePing"
	Server_RemoteSync_FullMethodName = "/grpc.Server/remoteSync"
	Server_RemoteCall_FullMethodName = "/grpc.Server/remoteCall"
)

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	RemotePing(ctx context.Context, in *PingArg, opts ...grpc.CallOption) (*PingResult, error)
	RemoteSync(ctx context.Context, in *SyncArg, opts ...grpc.CallOption) (Server_RemoteSyncClient, error)
	RemoteCall(ctx context.Context, in *CallArg, opts ...grpc.CallOption) (*CallResult, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) RemotePing(ctx context.Context, in *PingArg, opts ...grpc.CallOption) (*PingResult, error) {
	out := new(PingResult)
	err := c.cc.Invoke(ctx, Server_RemotePing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RemoteSync(ctx context.Context, in *SyncArg, opts ...grpc.CallOption) (Server_RemoteSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], Server_RemoteSync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverRemoteSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_RemoteSyncClient interface {
	Recv() (*SyncData, error)
	grpc.ClientStream
}

type serverRemoteSyncClient struct {
	grpc.ClientStream
}

func (x *serverRemoteSyncClient) Recv() (*SyncData, error) {
	m := new(SyncData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) RemoteCall(ctx context.Context, in *CallArg, opts ...grpc.CallOption) (*CallResult, error) {
	out := new(CallResult)
	err := c.cc.Invoke(ctx, Server_RemoteCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	RemotePing(context.Context, *PingArg) (*PingResult, error)
	RemoteSync(*SyncArg, Server_RemoteSyncServer) error
	RemoteCall(context.Context, *CallArg) (*CallResult, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) RemotePing(context.Context, *PingArg) (*PingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemotePing not implemented")
}
func (UnimplementedServerServer) RemoteSync(*SyncArg, Server_RemoteSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoteSync not implemented")
}
func (UnimplementedServerServer) RemoteCall(context.Context, *CallArg) (*CallResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteCall not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_RemotePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RemotePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_RemotePing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RemotePing(ctx, req.(*PingArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RemoteSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).RemoteSync(m, &serverRemoteSyncServer{stream})
}

type Server_RemoteSyncServer interface {
	Send(*SyncData) error
	grpc.ServerStream
}

type serverRemoteSyncServer struct {
	grpc.ServerStream
}

func (x *serverRemoteSyncServer) Send(m *SyncData) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_RemoteCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RemoteCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_RemoteCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RemoteCall(ctx, req.(*CallArg))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "remotePing",
			Handler:    _Server_RemotePing_Handler,
		},
		{
			MethodName: "remoteCall",
			Handler:    _Server_RemoteCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "remoteSync",
			Handler:       _Server_RemoteSync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
